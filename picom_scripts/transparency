#!/bin/python3

'''
This is a Python script that goes through the .config/picom/picom.conf replacing previous set strings.

Should be installed in /bin or /usr/bin for dmenu to be used.

Make sure the targets and replacements variables have exactly the same lines as found in .config/picom/picom.conf
This program needs updating if any of the used variables in the configuration file get changed.

Unintall: Just delete /bin/transparency or /usr/bin/transparency.

NOTE: Its advised to create backup of the config file before using the script.

Created by: Magus Vagus 
Anno 2025, May

magusvagus@proton.me

'''

# TODO: add command line flags support
import os

# returns 1 if searched string is in file, else returns 0
def checkFile(search,file_path):
    # open file in read mode
    with open(file_path, 'r') as file:

        # open all lines in a list
        lines = file.readlines()

        # go through every line retrun 1 if found
        for row in lines:
            # find() returns -1 if NOT found
            if row.find(search) != -1:
                return 1
        return 0


def WordReplace(target, replacement, file_path):
    with open(file_path, "r") as file:
        # read content of file to var
        data = file.read()
        # replace word with replace func
        data = data.replace(target, replacement)

    with open(file_path, "w") as file:
        # write changed file 
        file.write(data)


def main():
    # enter filepath
    file_path = "/home/ed/.config/picom/picom.conf"

    # check if path exists
    if not os.path.exists(file_path):
        print("ERROR: Filepath does not exist.")
        exit()


    #list of targets
    targets = [
        "95:class_g = 'librewolf' && focused",
        "89:class_g = 'librewolf' && !focused",
    ]

    # list of corresponding replacements
    replace = [
        "100:class_g = 'librewolf' && focused",
        "100:class_g = 'librewolf' && !focused",
    ]



    # look for one string and check for ERR
    for i in range(len(targets)):
        checkTarget =+ checkFile(targets[i], file_path)
        checkReplace =+ checkFile(replace[i], file_path)

        if (checkTarget + checkReplace) == 0:
            print("ERROR: No matching Target/replacements.")
            exit()


    # if returns 1 change to alternative option
    # if returns 0 toggle back to previous set option
    check = checkFile(targets[0], file_path)

    if check == 1:
        for i in range(len(targets)):
            WordReplace(targets[i], replace[i], file_path)

    elif check == 0:
        for i in range(len(targets)):
            WordReplace(replace[i], targets[i], file_path)

main()



